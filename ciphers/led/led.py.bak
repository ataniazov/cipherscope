#!/usr/bin/env python
"""
https://github.com/CrYpTo-DuCkS/LED_Cipher_Term_paper
"""

import numpy as np
import galois

from hmac import new as new_hmac, compare_digest
from hashlib import pbkdf2_hmac

from copy import deepcopy
import os


S_BOX = {0: 12, 1: 5, 2: 6, 3: 11, 4: 9, 5: 0, 6: 10, 7: 13,
         8: 3, 9: 14, 10: 15, 11: 8, 12: 4, 13: 7, 14: 1, 15: 2}
S_BOX_INV = {v: k for (k, v) in S_BOX.items()}
R_CON = [0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3E, 0x3D, 0x3B, 0x37, 0x2F, 0x1E,
         0x3C, 0x39, 0x33, 0x27, 0x0E, 0x1D, 0x3A, 0x35, 0x2B, 0x16, 0x2C, 0x18, 0x30]
MIX_MATRIX = [[0x4, 0x1, 0x2, 0x2],
              [0x8, 0x6, 0x5, 0x6],
              [0xB, 0xE, 0XA, 0x9],
              [0x2, 0x2, 0xF, 0xB]]

HMAC_KEY_SIZE = 8
IV_SIZE = 8

SALT_SIZE = 16
HMAC_SIZE = 32

GF16 = galois.GF(2**4)

MIX_MATRIX_INV = np.linalg.inv(GF16(MIX_MATRIX))
print(MIX_MATRIX_INV)


def get_key_iv(password, salt, key_size=8, workload=100000):
    """
    Stretches the password and extracts an AES key, an HMAC key and an AES
    initialization vector.
    """
    assert (key_size == 8 or key_size == 16)
    stretched = pbkdf2_hmac('sha256', password, salt,
                            workload, key_size + IV_SIZE + HMAC_KEY_SIZE)
    aes_key, stretched = stretched[:key_size], stretched[key_size:]
    hmac_key, stretched = stretched[:HMAC_KEY_SIZE], stretched[HMAC_KEY_SIZE:]
    iv = stretched[:IV_SIZE]
    return aes_key, hmac_key, iv


def bytes2matrix(text):
    """ Converts a 16-byte array into a 4x4 matrix.  """
    return [[(text[i] & 0xf0) >> 4, text[i] & 0x0f, (text[i+1] & 0xf0) >> 4, text[i+1] & 0x0f] for i in range(0, len(text), 2)]


def matrix2bytes(matrix):
    """ Converts a 4x4 matrix into a 16-byte array.  """
    return bytes([(matrix[i][j] << 4)+matrix[i][j+1] for i in range(4) for j in range(0, 4, 2)])


def xor_bytes(a, b):
    """ Returns a new byte array with the elements xor'ed. """
    return bytes(i ^ j for i, j in zip(a, b))


def inc_bytes(a):
    """ Returns a new byte array with the value increment by 1 """
    out = list(a)
    for i in reversed(range(len(out))):
        if out[i] == 0xFF:
            out[i] = 0
        else:
            out[i] += 1
            break
    return bytes(out)


def sub_cells(s):
    for i in range(4):
        for j in range(4):
            s[i][j] = S_BOX[s[i][j]]


def inv_sub_cells(s):
    for i in range(4):
        for j in range(4):
            s[i][j] = S_BOX_INV[s[i][j]]


def shift_rows(s):
    s[1][0], s[1][1], s[1][2], s[1][3] = s[1][1], s[1][2], s[1][3], s[1][0]
    s[2][0], s[2][1], s[2][2], s[2][3] = s[2][2], s[2][3], s[2][0], s[2][1]
    s[3][0], s[3][1], s[3][2], s[3][3] = s[3][3], s[3][0], s[3][1], s[3][2]


def inv_shift_rows(s):
    s[1][0], s[1][1], s[1][2], s[1][3] = s[1][3], s[1][0], s[1][1], s[1][2]
    s[2][0], s[2][1], s[2][2], s[2][3] = s[2][2], s[2][3], s[2][0], s[2][1]
    s[3][0], s[3][1], s[3][2], s[3][3] = s[3][1], s[3][2], s[3][3], s[3][0]


def add_round_key(s, k):
    for i in range(4):
        for j in range(4):
            s[i][j] ^= k[i][j]


def add_constants(s, key_size, rn):
    msb_k = (key_size & 0xF0) >> 4
    lsb_k = key_size & 0x0F
    msb_rc = (R_CON[rn] & 0x38) >> 3
    lsb_rc = R_CON[rn] & 0x07
    ac_mat = [[0 ^ msb_k, msb_rc, 0, 0],
              [1 ^ msb_k, lsb_rc, 0, 0],
              [2 ^ lsb_k, msb_rc, 0, 0],
              [3 ^ lsb_k, lsb_rc, 0, 0]]
    for i in range(4):
        for j in range(4):
            s[i][j] ^= ac_mat[i][j]


def mix_columns_serial(s):
    ans = np.matmul(GF16(MIX_MATRIX), GF16(s))
    for i in range(4):
        for j in range(4):
            s[i][j] = int(ans[i][j])


def inv_mix_columns_serial(s):
    ans = np.matmul(MIX_MATRIX_INV, GF16(s))
    for i in range(4):
        for j in range(4):
            s[i][j] = int(ans[i][j])


def pad(plaintext):
    """
    Pads the given plaintext with PKCS#7 padding to a multiple of 16 bytes.
    Note that if the plaintext size is a multiple of 16,
    a whole block will be added.
    """
    padding_len = 8 - (len(plaintext) % 8)
    padding = bytes([padding_len] * padding_len)
    return plaintext + padding


def unpad(plaintext):
    """
    Removes a PKCS#7 padding, returning the unpadded text and ensuring the
    padding was correct.
    """
    padding_len = plaintext[-1]
    assert padding_len > 0
    message, padding = plaintext[:-padding_len], plaintext[-padding_len:]
    assert all(p == padding_len for p in padding)
    return message


def split_blocks(message, block_size=8, require_padding=True):
    assert len(message) % block_size == 0 or not require_padding
    return [message[i:i+block_size] for i in range(0, len(message), block_size)]


class LED:
    rounds_by_key_size = {8: 8, 16: 12}

    def __init__(self, master_key):
        self.__master_key = master_key
        self.n_rounds = LED.rounds_by_key_size[len(master_key)]
        self.key_schedule()
        self.modes_dict = {'ebc': (self.encrypt_ebc, self.decrypt_ebc),
                           'cbc': (self.encrypt_cbc, self.decrypt_cbc),
                           'pcbc': (self.encrypt_pcbc, self.decrypt_pcbc),
                           'cfb': (self.encrypt_cfb, self.decrypt_cfb),
                           'ofb': (self.encrypt_ofb, self.decrypt_ofb),
                           'ctr': (self.encrypt_ctr, self.decrypt_ctr)}

    def key_schedule(self):
        self.__subkeys = []
        if len(self.__master_key) == 8:
            self.__subkeys.append(bytes2matrix(self.__master_key))
        else:
            self.__subkeys.append(bytes2matrix(self.__master_key[0:8]))
            self.__subkeys.append(bytes2matrix(self.__master_key[8:16]))
        # print(self.__subkeys)

    def encrypt_block(self, plaintext):
        """
        Encrypts a single block of 16 byte long plaintext.
        """
        assert len(plaintext) == 8

        plain_state = bytes2matrix(plaintext)
        # state_after_every_round = []
        # state_after_every_round.append(deepcopy(plain_state))

        for i in range(self.n_rounds-1):
            add_round_key(plain_state, self.__subkeys[min(
                i % 2, len(self.__subkeys)-1)])
            # state_after_every_round.append(deepcopy(plain_state))
            add_constants(plain_state, len(self.__master_key), i)
            # state_after_every_round.append(deepcopy(plain_state))
            sub_cells(plain_state)
            # state_after_every_round.append(deepcopy(plain_state))
            shift_rows(plain_state)
            # state_after_every_round.append(deepcopy(plain_state))
            mix_columns_serial(plain_state)
            # state_after_every_round.append(deepcopy(plain_state))

        add_round_key(plain_state, self.__subkeys[min(
            (self.n_rounds-1) % 2, len(self.__subkeys)-1)])
        # state_after_every_round.append(deepcopy(plain_state))

        return matrix2bytes(plain_state)

    def decrypt_block(self, ciphertext):
        """
        Decrypts a single block of 16 byte long ciphertext.
        """
        assert len(ciphertext) == 8

        cipher_state = bytes2matrix(ciphertext)

        add_round_key(cipher_state, self.__subkeys[min(
            (self.n_rounds-1) % 2, len(self.__subkeys)-1)])

        for i in range(self.n_rounds - 2, -1, -1):
            inv_mix_columns_serial(cipher_state)
            inv_shift_rows(cipher_state)
            inv_sub_cells(cipher_state)
            add_constants(cipher_state, len(self.__master_key), i)
            add_round_key(cipher_state, self.__subkeys[min(
                i % 2, len(self.__subkeys)-1)])

        return matrix2bytes(cipher_state)

    def encrypt_ebc(self, plaintext, iv):
        """
        Encrypts `plaintext` using EBC mode and PKCS#7 padding.
        """

        plaintext = pad(plaintext)

        blocks = []
        for plaintext_block in split_blocks(plaintext):
            # CBC mode encrypt: encrypt(plaintext_block XOR previous)
            block = self.encrypt_block(plaintext_block)
            blocks.append(block)

        return b''.join(blocks)

    def decrypt_ebc(self, ciphertext, iv):
        """
        Decrypts `ciphertext` using CBC mode and PKCS#7 padding, with the given
        initialization vector (iv).
        """

        blocks = []
        for ciphertext_block in split_blocks(ciphertext):
            # CBC mode decrypt: previous XOR decrypt(ciphertext)
            blocks.append(self.decrypt_block(ciphertext_block))

        return unpad(b''.join(blocks))

    def encrypt_cbc(self, plaintext, iv):
        """
        Encrypts `plaintext` using CBC mode and PKCS#7 padding, with the given
        initialization vector (iv).
        """
        assert len(iv) == 8

        plaintext = pad(plaintext)

        blocks = []
        previous = iv
        for plaintext_block in split_blocks(plaintext):
            # CBC mode encrypt: encrypt(plaintext_block XOR previous)
            block = self.encrypt_block(xor_bytes(plaintext_block, previous))
            blocks.append(block)
            previous = block

        return b''.join(blocks)

    def decrypt_cbc(self, ciphertext, iv):
        """
        Decrypts `ciphertext` using CBC mode and PKCS#7 padding, with the given
        initialization vector (iv).
        """
        assert len(iv) == 8

        blocks = []
        previous = iv
        for ciphertext_block in split_blocks(ciphertext):
            # CBC mode decrypt: previous XOR decrypt(ciphertext)
            blocks.append(
                xor_bytes(previous, self.decrypt_block(ciphertext_block)))
            previous = ciphertext_block

        return unpad(b''.join(blocks))

    def encrypt_pcbc(self, plaintext, iv):
        """
        Encrypts `plaintext` using PCBC mode and PKCS#7 padding, with the given
        initialization vector (iv).
        """
        assert len(iv) == 8

        plaintext = pad(plaintext)

        blocks = []
        prev_ciphertext = iv
        prev_plaintext = bytes(16)
        for plaintext_block in split_blocks(plaintext):
            # PCBC mode encrypt: encrypt(plaintext_block XOR (prev_ciphertext XOR prev_plaintext))
            ciphertext_block = self.encrypt_block(
                xor_bytes(plaintext_block, xor_bytes(prev_ciphertext, prev_plaintext)))
            blocks.append(ciphertext_block)
            prev_ciphertext = ciphertext_block
            prev_plaintext = plaintext_block

        return b''.join(blocks)

    def decrypt_pcbc(self, ciphertext, iv):
        """
        Decrypts `ciphertext` using PCBC mode and PKCS#7 padding, with the given
        initialization vector (iv).
        """
        assert len(iv) == 8

        blocks = []
        prev_ciphertext = iv
        prev_plaintext = bytes(16)
        for ciphertext_block in split_blocks(ciphertext):
            # PCBC mode decrypt: (prev_plaintext XOR prev_ciphertext) XOR decrypt(ciphertext_block)
            plaintext_block = xor_bytes(xor_bytes(
                prev_ciphertext, prev_plaintext), self.decrypt_block(ciphertext_block))
            blocks.append(plaintext_block)
            prev_ciphertext = ciphertext_block
            prev_plaintext = plaintext_block

        return unpad(b''.join(blocks))

    def encrypt_cfb(self, plaintext, iv):
        """
        Encrypts `plaintext` with the given initialization vector (iv).
        """
        assert len(iv) == 8

        blocks = []
        prev_ciphertext = iv
        for plaintext_block in split_blocks(plaintext, require_padding=False):
            # CFB mode encrypt: plaintext_block XOR encrypt(prev_ciphertext)
            ciphertext_block = xor_bytes(
                plaintext_block, self.encrypt_block(prev_ciphertext))
            blocks.append(ciphertext_block)
            prev_ciphertext = ciphertext_block

        return b''.join(blocks)

    def decrypt_cfb(self, ciphertext, iv):
        """
        Decrypts `ciphertext` with the given initialization vector (iv).
        """
        assert len(iv) == 8

        blocks = []
        prev_ciphertext = iv
        for ciphertext_block in split_blocks(ciphertext, require_padding=False):
            # CFB mode decrypt: ciphertext XOR decrypt(prev_ciphertext)
            plaintext_block = xor_bytes(
                ciphertext_block, self.encrypt_block(prev_ciphertext))
            blocks.append(plaintext_block)
            prev_ciphertext = ciphertext_block

        return b''.join(blocks)

    def encrypt_ofb(self, plaintext, iv):
        """
        Encrypts `plaintext` using OFB mode initialization vector (iv).
        """
        assert len(iv) == 8

        blocks = []
        previous = iv
        for plaintext_block in split_blocks(plaintext, require_padding=False):
            # OFB mode encrypt: plaintext_block XOR encrypt(previous)
            block = self.encrypt_block(previous)
            ciphertext_block = xor_bytes(plaintext_block, block)
            blocks.append(ciphertext_block)
            previous = block

        return b''.join(blocks)

    def decrypt_ofb(self, ciphertext, iv):
        """
        Decrypts `ciphertext` using OFB mode initialization vector (iv).
        """
        assert len(iv) == 8

        blocks = []
        previous = iv
        for ciphertext_block in split_blocks(ciphertext, require_padding=False):
            # OFB mode decrypt: ciphertext XOR encrypt(previous)
            block = self.encrypt_block(previous)
            plaintext_block = xor_bytes(ciphertext_block, block)
            blocks.append(plaintext_block)
            previous = block

        return b''.join(blocks)

    def encrypt_ctr(self, plaintext, iv):
        """
        Encrypts `plaintext` using CTR mode with the given nounce/IV.
        """
        assert len(iv) == 8

        blocks = []
        nonce = iv
        for plaintext_block in split_blocks(plaintext, require_padding=False):
            # CTR mode encrypt: plaintext_block XOR encrypt(nonce)
            block = xor_bytes(plaintext_block, self.encrypt_block(nonce))
            blocks.append(block)
            nonce = inc_bytes(nonce)

        return b''.join(blocks)

    def decrypt_ctr(self, ciphertext, iv):
        """
        Decrypts `ciphertext` using CTR mode with the given nounce/IV.
        """
        assert len(iv) == 8

        blocks = []
        nonce = iv
        for ciphertext_block in split_blocks(ciphertext, require_padding=False):
            # CTR mode decrypt: ciphertext XOR encrypt(nonce)
            block = xor_bytes(ciphertext_block, self.encrypt_block(nonce))
            blocks.append(block)
            nonce = inc_bytes(nonce)

        return b''.join(blocks)


def encrypt(key, plaintext, mode='cbc', workload=100000, key_size=8):
    """
    Encrypts `plaintext` with `key` using LED, an HMAC to verify integrity,
    and PBKDF2 to stretch the given key.

    The exact algorithm is specified in the module docstring.
    """
    if isinstance(key, str):
        key = key.encode('utf-8')
    if isinstance(plaintext, str):
        plaintext = plaintext.encode('utf-8')

    salt = os.urandom(SALT_SIZE)
    key, hmac_key, iv = get_key_iv(key, salt, key_size, workload)
    ciphertext = LED(key).modes_dict[mode][0](plaintext, iv)
    hmac = new_hmac(hmac_key, salt + ciphertext, 'sha256').digest()
    assert len(hmac) == HMAC_SIZE

    return hmac + salt + ciphertext


def decrypt(key, ciphertext, mode='cbc', workload=100000, key_size=8):
    """
    Decrypts `ciphertext` with `key` using LED, an HMAC to verify integrity,
    and PBKDF2 to stretch the given key.

    The exact algorithm is specified in the module docstring.
    """

    assert len(
        ciphertext) % 8 == 0, "Ciphertext must be made of full 16-byte blocks."

    assert len(ciphertext) >= 16, """
    Ciphertext must be at least 32 bytes long (16 byte salt + 16 byte block). To
    encrypt or decrypt single blocks use `LED(key).decrypt_block(ciphertext)`.
    """

    if isinstance(key, str):
        key = key.encode('utf-8')

    hmac, ciphertext = ciphertext[:HMAC_SIZE], ciphertext[HMAC_SIZE:]
    salt, ciphertext = ciphertext[:SALT_SIZE], ciphertext[SALT_SIZE:]
    key, hmac_key, iv = get_key_iv(key, salt, key_size, workload)

    expected_hmac = new_hmac(hmac_key, salt + ciphertext, 'sha256').digest()
    assert compare_digest(
        hmac, expected_hmac), 'Ciphertext corrupted or tampered.'

    return LED(key).modes_dict[mode][1](ciphertext, iv)


# workload=100000
# salt = os.urandom(SALT_SIZE)
# key, hmac_key, iv = get_key_iv(b'DHRUVDESHMUKH\0\0\0', salt, workload)
# led = LED(key)
print(decrypt(b'DHRUVDES', encrypt(b'DHRUVDES', b'DHRUVDESHMUKH\0\0\0',
      mode='ctr', key_size=16), mode='ctr', key_size=16))
print(encrypt(b'DHRUVDES', b'DHRUVDESHMUKH\0\0\0', mode='ctr', key_size=16))

print(encrypt(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', mode='ctr', key_size=8).hex())
print(encrypt(b'0000000000000000', b'0000000000000000', mode='ebc', key_size=8).hex())

print(LED(b'\x00\x00\x00\x00\x00\x00\x00\x00').encrypt_block(b'\x00\x00\x00\x00\x00\x00\x00\x00').hex())



# print(led.decrypt_block(led.encrypt_block(b'DHRUVDES')))
